**FUTURE APEX**


**Create an Apex class that uses the @future annotation to update Account records.**

Create an Apex class with a method using the @future annotation that accepts a List of Account IDs and updates a custom field on the Account object with the number of contacts associated to the Account. Write unit tests that achieve 100% code coverage for the class.
Create a field on the Account object called 'Number_of_Contacts__c' of type Number. This field will hold the total number of Contacts for the Account.
Create an Apex class called 'AccountProcessor' that contains a 'countContacts' method that accepts a List of Account IDs. This method must use the @future annotation.
For each Account ID passed to the method, count the number of Contact records associated to it and update the 'Number_of_Contacts__c' field with this value.
Create an Apex test class called 'AccountProcessorTest'.
The unit tests must cover all lines of code included in the AccountProcessor class, resulting in 100% code coverage.
Run your test class at least once (via 'Run All' tests the Developer Console) before attempting to verify this challenge.

public class AccountProcessor {
    @Future
    public static void countContacts(List<id> idList){
        List<Account> listAct = [SELECT Id,Number_of_Contacts__c,(SELECT Id FROM contacts) from Account where Id IN:idList];
        for(Account acct:listAct)
        {
            List<Contact> listCon = acct.Contacts;
            acct.Number_of_Contacts__c = listCon.size();
   
        }
        update listAct;
    }

}



@isTest
public class AccountProcessorTest {
    public static testMethod void TestAccountProcessorTest(){
        Account act = new Account();
        act.Name = 'Test account';
        Insert act;
        
        Contact con = new Contact();
        con.FirstName = 'FTest';
        con.LastName = 'LTest';
        con.AccountId=act.Id;
        Insert con;
        
        List<Id> listId = new List<Id>();
        listId.add(act.Id);
        
        Test.startTest();
        AccountProcessor.countContacts(listId);
        Test.stopTest();
        
        Account acct = [SELECT Number_of_Contacts__c From Account WHERE Id = :act.Id LIMIT 1];
        System.assertEquals(Integer.valueOf(Acct.Number_of_Contacts__c), 1);
        
    }  
}


**BATCH APEX**
Create an Apex class that uses Batch Apex to update Lead records.
Create an Apex class that implements the Database.Batchable interface to update all Lead records in the org with a specific LeadSource. Write unit tests that achieve 100% code coverage for the class.
Create an Apex class called 'LeadProcessor' that uses the Database.Batchable interface.
Use a QueryLocator in the start method to collect all Lead records in the org.
The execute method must update all Lead records in the org with the LeadSource value of 'Dreamforce'.
Create an Apex test class called 'LeadProcessorTest'.
In the test class, insert 200 Lead records, execute the 'LeadProcessor' Batch class and test that all Lead records were updated correctly.
The unit tests must cover all lines of code included in the LeadProcessor class, resulting in 100% code coverage.
Run your test class at least once (via 'Run All' tests the Developer Console) before attempting to verify this challenge.

global class LeadProcessor implements Database.Batchable<sObject>{
            global Integer counter=0;
    global Database.QueryLocator start(Database.BatchableContext bc){
        return Database.getQueryLocator('SELECT ID, Name, LeadSource FROM LEAD');
    }
    global void execute(Database.BatchableContext bc , List<Lead> scope){
        List<Lead> leads = new List<Lead>();
        For(Lead lead : scope){
            lead.LeadSource = 'Dreamforce';
             leads.add(lead);
            counter=counter+1;
        }
       update leads;
     }
    global void finish(Database.BatchableContext bc){
        system.debug(Counter);
       Id job = bc.getJobId();
        System.debug(job);
    }
}




@isTest
private class LeadProcessorTest {
    @isTest
    static void testLeadProcessor(){
        List<Lead> leadList = new List<Lead>();
        for(Integer i=0; i<200; i++){
        Lead lead1=new Lead();
        lead1.LastName='testlead';
        lead1.Company='xyz';
        lead1.status='status';
        leadList.add(lead1);
    }
    Insert leadList;
        
        Test.startTest();
        LeadProcessor leadproc = new LeadProcessor();
        Id jobid = database.executeBatch(leadproc);
        Test.stopTest();
           
    }
    

}


**QUEUEABLE APEX**
Create a Queueable Apex class that inserts the same Contact for each Account for a specific state. Write unit tests that achieve 100% code coverage for the class.
Create an Apex class called 'AddPrimaryContact' that implements the Queueable interface.
Create a constructor for the class that accepts as its first argument a Contact sObject and a second argument as a string for the State abbreviation.
The execute method must query for a maximum of 200 Accounts with the BillingState specified by the State abbreviation passed into the constructor and insert the Contact sObject record associated to each Account. Look at the sObject clone() method.
Create an Apex test class called 'AddPrimaryContactTest'.
In the test class, insert 50 Account records for BillingState "NY" and 50 Account records for BillingState "CA". Create an instance of the AddPrimaryContact class, enqueue the job and assert that a Contact record was inserted for each of the 50 Accounts with the BillingState of "CA".
The unit tests must cover all lines of code included in the AddPrimaryContact class, resulting in 100% code coverage.
Run your test class at least once (via 'Run All' tests the Developer Console) before attempting to verify this challenge.

public class AddPrimaryContact implements Queueable{
    private Contact con;
    private String st;
    public AddPrimaryContact(Contact con, String st){
        this.con = con;
        this.st = st;
     }
    public void execute(QueueableContext context){
    List<Account> actList = [SELECT ID, Name, (SELECT ID, FirstName, LastName FROM COntacts) FROM Account WHERE BillingState = :st LIMIT 200];
    List<Contact> conList = new List<Contact>();
        for(Account act: actList){
            Contact cont = con.Clone(false,false,false,false);
            cont.AccountId = act.id;
            conList.add(cont);
        }
        if(conList.size()>0){
            insert conList;
        }
    }
}



@isTest
public class AddPrimaryContactTest {
    @istest
    static void setup(){
        List<Account> actList = new List<Account>();
        For(Integer i=0; i<50; i++){
            actList.add(new Account(BillingState = 'CA' , name = 'Test' + i));
        }
        For(Integer i=0; i<50; i++){
            actList.add(new Account(BillingState = 'NY' , name = 'Test' + i));
        } 
        insert actList;
        Contact c = new Contact();
        c.FirstName='Fdemo';
        c.LastName='ldemo';
        insert c;
        String state = 'CA';
        
        AddPrimaryContact apc = new AddPrimaryContact(c , state);
        Test.startTest();
        system.enqueueJob(apc);
        Test.stopTest();
    }
}


**Asynchronous Apex*
Create an Apex class that uses Scheduled Apex to update Lead records.
Create an Apex class that implements the Schedulable interface to update Lead records with a specific LeadSource. Write unit tests that achieve 100% code coverage for the class. This is very similar to what you did for Batch Apex.
Create an Apex class called 'DailyLeadProcessor' that uses the Schedulable interface.
The execute method must find the first 200 Leads with a blank LeadSource field and update them with the LeadSource value of 'Dreamforce'.
Create an Apex test class called 'DailyLeadProcessorTest'.
In the test class, insert 200 Lead records, schedule the DailyLeadProcessor class to run and test that all Lead records were updated correctly.
The unit tests must cover all lines of code included in the DailyLeadProcessor class, resulting in 100% code coverage.
Run your test class at least once (via 'Run All' tests the Developer Console) before attempting to verify this challenge.



global class DailyLeadProcessor implements Schedulable{
    
    global void execute(SchedulableContext cxt){
        List<Lead> leads = [SELECT ID, Name FROM LEAD WHERE LeadSource = null LIMIT 200];
        List<Lead> listLeads = new List<Lead>();
                
            for(Lead lead : leads){
                lead.LeadSource = 'Dreamforce';
                listLeads.add(lead);
            }
                       update listLeads;
        }
}



@isTest
public class DailyLeadProcessorTest {
    public static String sch = '0 0 0 15 3 ? 2022';
    
    static testmethod void testScheduledJob(){
        List<Lead> listLead = new List<Lead>();
        For(Integer i=0; i < 200; i++)
        {
            Lead lead = new Lead(Company = 'ctest' +i , LastName = 'Ltest' +i);
            listLead.add(lead);
        }
        insert listLead;
    
    Map<Id, Lead> ledMap = new Map<Id, Lead>(listLead);
        List<Id> ledIds = new List<Id>(ledMap.keySet());
        
        
          Test.startTest();
        String jobId = System.Schedule('ScheduledApexText', sch, new DailyLeadProcessor());
        List<Lead> lt = [SELECT ID FROM Lead WHERE LeadSource = null and id in :ledIds];
        system.assertEquals(200, lt.size());
        Test.stopTest();
            
    }  
}






